<script>
    // Note: This example requires that you consent to location sharing when
    // prompted by your browser. If you see the error "The Geolocation service
    // failed.", it means you probably did not give permission for the browser to
    // locate you.
    var map, infoWindow, geocoder, curMarker, directionsDisplayer, directions;

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: 42.376170, lng: -71.238990},
            disableDefaultUI: true,
            zoom: 13
        });
        infoWindow = new google.maps.InfoWindow;
        geocoder = new google.maps.Geocoder();
        directionsDisplayer = new google.maps.DirectionsRenderer;
        directions = new google.maps.DirectionsService;

        getLocation();

        new AutocompleteDirectionsHandler(map, geocoder);
    }

    function AutocompleteDirectionsHandler(map, geocoder) {
        this.map = map;
        this.geocoder = geocoder;
        this.originCoordinate = null;
        this.destinationCoordinate = null;
        this.originPlaceId = null;
        this.destinationPlaceId = null;
        this.travelMode = 'DRIVING';
        var originInput = document.getElementById('starting_input');
        var destinationInput = document.getElementById('destination_input');
        this.directionsService = directions;
        this.directionsDisplay = directionsDisplayer;
        this.directionsDisplay.setMap(map);

        var originAutocomplete = new google.maps.places.Autocomplete(
            originInput, {fields: ['geometry','place_id']});
        var destinationAutocomplete = new google.maps.places.Autocomplete(
            destinationInput, {fields: ['geometry','place_id']});

        this.setupPlaceChangedListener(originInput, originAutocomplete, 'ORIG');
        this.setupPlaceChangedListener(destinationInput, destinationAutocomplete, 'DEST');
        this.setupEnterPressListener(originInput);
        this.setupEnterPressListener(destinationInput);
      }

      AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function(input, autocomplete, mode) {
        var me = this;
        autocomplete.bindTo('bounds', this.map);
        autocomplete.addListener('place_changed', function() {
          var place = autocomplete.getPlace();
          var location = place.geometry.location;
          if (!place.place_id) {
            console.log("null place_id")
            return;
          }

          me.map.setZoom(15);
          me.map.setCenter(location);
          if(curMarker!=null) {
            curMarker.setMap(null);
          }
          curMarker = new google.maps.Marker({
            map: me.map,
            position: location
          });

          var infos = {id: place.place_id, address: input.value,
                       lat: location.lat(), lng: location.lng()};
          if (mode === 'ORIG') {
            me.originPlaceId = place.place_id;
            me.originCoordinate = place.geometry.location;
            setFields('.starting', infos);
          } else {
            me.destinationPlaceId = place.place_id;
            me.destinationCoordinate = place.geometry.location;
            setFields('.destination', infos);
          }
          me.route();
        });
      };

      AutocompleteDirectionsHandler.prototype.setupEnterPressListener = function(input) {
        var _addEventListener = (input.addEventListener) ? input.addEventListener : input.attachEvent;
        var me = this;
        var suggestion_selected = $(".pac-item-selected").length > 0;

        function addEventListenerWrapper(type, listener) {
            // Simulate a 'down arrow' keypress on hitting 'return' when no pac suggestion is selected,
            // and then trigger the original listener.
            if (type == "keydown") {
                var orig_listener = listener;
                listener = function(event) {
                    var suggestion_selected = $(".pac-item-selected").length > 0;
                    if (event.which == 13 && !suggestion_selected) {
                        var simulated_downarrow = $.Event("keydown", {
                            keyCode: 40,
                            which: 40
                        });
                        orig_listener.apply(input, [simulated_downarrow]);
                    }

                    orig_listener.apply(input, [event]);
                };
            }

            _addEventListener.apply(input, [type, listener]);
        }

        input.addEventListener = addEventListenerWrapper;
        input.attachEvent = addEventListenerWrapper;
      }

      AutocompleteDirectionsHandler.prototype.route = function() {
        if (!this.originPlaceId || !this.destinationPlaceId) {
          return;
        }
        var me = this;
        this.directionsService.route({
          origin: this.originCoordinate,
          destination: this.destinationCoordinate,
          travelMode: this.travelMode
        }, function(response, status) {
          if (status === 'OK') {
            curMarker.setMap(null);
            me.directionsDisplay.setMap(me.map);
            me.directionsDisplay.setDirections(response);
            var duration = response.routes[0].legs.reduce(
              (res, leg) => res+leg.duration.value, 0
            );
            document.getElementById('duration').value=duration;
          } else {
            window.alert('Directions request failed due to ' + status);
          }
        });
      };

    function getLocation() {
      // Try HTML5 geolocation.
      if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
              var pos = {
                  lat: position.coords.latitude,
                  lng: position.coords.longitude
              };

              infoWindow.setPosition(pos);
              infoWindow.setContent("You're here");
              infoWindow.open(map);
              map.setCenter(pos);

              geocoder.geocode({'location': pos}, function(results, status) {
                if (status === 'OK') {
                  if (results[0]) {
                    map.setZoom(15);
                    document.getElementById('starting_input').value=results[0].formatted_address;
                  } else {
                    window.alert('No results found');
                  }
                } else {
                  window.alert('Geocoder failed due to: ' + status);
                }
              });

          }, function() {
              handleLocationError(true, infoWindow, map.getCenter());
          });
      } else {
          // Browser doesn't support Geolocation
          handleLocationError(false, infoWindow, map.getCenter());
      }
    }

    function showRoute(response) {
      var route = response.routes[0];
      var waypts = [];
      for (var i = 1; i < response.routes[0].legs.length; i++) {
        waypts.push({
          location: response.routes[0].legs[i].start_location
        });
      }
      directions.route({
        origin: route.legs[0].start_location,
        destination: route.legs[route.legs.length-1].end_location,
        waypoints: waypts,
        travelMode: 'DRIVING'
      }, function(response, status) {
        if (status === 'OK') {
          curMarker.setMap(null);
          directionsDisplayer.setMap(map);
          directionsDisplayer.setDirections(response);
        } else {
          window.alert('Directions request failed due to ' + status);
        }
      });
    }

    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        infoWindow.setPosition(pos);
        infoWindow.setContent(browserHasGeolocation ?
            'Error: The Geolocation service failed.' :
            'Error: Your browser doesn\'t support geolocation.');
        infoWindow.open(map);
    }

    function setFields(loc, infos) {
      $(loc+'_id').each(function(){
        $(this).val(infos.id);
      });
      $(loc+'_address').each(function(){
        $(this).val(infos.address);
      });
      $(loc+'_lat').each(function(){
        $(this).val(infos.lat);
      });
      $(loc+'_lng').each(function(){
        $(this).val(infos.lng);
      });
    }
</script>

<script async defer
        src= "https://maps.googleapis.com/maps/api/js?key=AIzaSyBB0imXtZ5Rr0x4A57NO4Un665BEQCpCoU&libraries=places&callback=initMap" >
</script>
